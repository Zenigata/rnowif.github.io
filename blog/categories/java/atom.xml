<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Renaud Humbert-Labeaumaz]]></title>
  <link href="https://rnowif.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="https://rnowif.github.io/"/>
  <updated>2016-04-23T16:21:50+02:00</updated>
  <id>https://rnowif.github.io/</id>
  <author>
    <name><![CDATA[Renaud Humbert-Labeaumaz]]></name>
    <email><![CDATA[renaud.humbert-labeaumaz@zenika.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Multiples Vues JSON Avec @JsonView]]></title>
    <link href="https://rnowif.github.io/blog/2015/04/14/multiples-vues-json-avec-at-jsonview/"/>
    <updated>2015-04-14T22:05:31+02:00</updated>
    <id>https://rnowif.github.io/blog/2015/04/14/multiples-vues-json-avec-at-jsonview</id>
    <content type="html"><![CDATA[<p>Le format <a href="http://fr.wikipedia.org/wiki/JavaScript_Object_Notation">Json</a> est de plus en plus utilisé aujourd'hui notamment dans les API de type REST qui offrent des services et retournent leurs résultats sous ce format. Afin d'éviter d'avoir à écrire la transformation en Json manuellement, il existe de nombreuses librairies permettant de faire cette transformation de manière automatique.</p>

<p>Dans cet article, nous allons voir comment utiliser la librairie <a href="http://jackson.codehaus.org/">Jackson</a> et notamment l'annotation <code>@JsonView</code> pour configurer plusieurs transformations pour un même objet. Nous allons également voir succintement comment intégrer cette annotation avec le framework <a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html">Spring MVC</a>.</p>

<!-- more -->


<h2>Convertir un objet en Json avec Jackson</h2>

<p>Le code suivant permet d'utiliser Jackson pour convertir un objet Java en Json de manière automatique.</p>

<pre><code class="java">public String toJson(Foo foo) {
    ObjectMapper mapper = new ObjectMapper();
    return mapper.writeValueAsString(foo);
}
</code></pre>

<h2>Introduction à @JsonView</h2>

<p>Lorsque Jackson convertit l'objet en Json, il prend en compte tous les champs de cet objet. Or, dans la vie courante, il est rarement pertinent de récupérer tous les champs dans le Json final (par exemple, le mot de passe d'un utilisateur) et il est souvent intéressant d'avoir deux sorties différentes en fonction du contexte (par exemple, un Json résumé et un détaillé avec plus de champs).</p>

<p>L'annotation <code>@JsonView</code> permet de définir des vues et associer chaque champ à une ou plusieurs vues. Ainsi, au moment de la conversion, on indique à Jackson quelle vue utiliser et seuls les champs associés à cette vue seront pris en compte.</p>

<h3>Mise en place des vues</h3>

<p>La vue Json doit être une classe, ainsi elle peut bénéficier de l'héritage. Si la vue A hérite de la vue B, tous les champs associés à la vue B seront pris en compte lorsqu'on va exporter la vue A.</p>

<p>Les vues peuvent être définies de la façon suivante.</p>

<pre><code class="java">public class JsonViews {

    public static class PublicView { };
    public static class InternalOnlyView extends PublicView { };

}
</code></pre>

<p>Il n'y a pas besoin de mettre quoi que ce soit dans les classes, une simple déclaration suffit. C'est pourquoi il est plus simple de les regrouper dans une classe. On remarque ici l'héritage qui permet d'indiquer que tout ce qui est public sera visible également dans la vue interne.</p>

<h3>Association d'une vue à un champ</h3>

<p>Pour associer une vue à un champ, il faut l'annoter avec <code>@JsonView</code> avec la vue en paramètre.</p>

<pre><code class="java">public class Foo {

    @JsonView(JsonViews.PublicView.class)
    private String name;

    @JsonView(JsonViews.InternalOnlyView.class)
    private String password;
}
</code></pre>

<p>Ensuite, pour indiquer à Jackson d'exporter seulement cette vue, il faut lui passer en paramètre au moment de la conversion.</p>

<pre><code class="java">public String toJsonPublic(Foo foo) {
    ObjectMapper mapper = new ObjectMapper();
    return mapper
        .writerWithView(JsonViews.PublicView.class)
        .writeValueAsString(foo);
}
</code></pre>

<p><em>NB : Il est possible de définir plusieurs vues pour un champ en les mettant entre crochets <code>@JsonView({View1.class, View2.class})</code>. Ainsi, ce champ sera pris en compte dans chacune des vues</em></p>

<h2>Intégration avec Spring MVC</h2>

<p>Dans un controller Spring MVC, il n'est pas utile d'utiliser le code de conversion écrit précédemment. En effet, Jackson est intégré avec Spring MVC. Il suffit d'annoter la méthode du controller avec <code>@JsonView</code> pour lui indiquer la vue à utiliser.</p>

<pre><code class="java">@RestController
public class FooController {

    @JsonView(JsonViews.PublicView.class)
    @RequestMapping (value = "/public/foo", method = RequestMethod.GET)
    public Foo getFoo() {
        return new Foo("name", "password");
    }
}
</code></pre>

<p>Un appel à <code>/public/foo</code> va automatiquement retourner un objet Json qui représente la vue publique de l'objet instancié dans la méthode.</p>

<h2>Conclusion</h2>

<p><code>@JsonView</code> est un outil très simple et très puissant qui permet d'avoir plusieurs représentations du même objet sans avoir à écrire de code autre que quelques annotations. De plus, son intégration avec Spring MVC le rend très peu intrusif et ne pollue pas le code avec des opérations de conversion.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eviter Les Classes Utilitaires Et Les Appels Statiques]]></title>
    <link href="https://rnowif.github.io/blog/2015/03/30/eviter-les-classes-utilitaires-et-les-appels-statiques/"/>
    <updated>2015-03-30T22:14:16+02:00</updated>
    <id>https://rnowif.github.io/blog/2015/03/30/eviter-les-classes-utilitaires-et-les-appels-statiques</id>
    <content type="html"><![CDATA[<p>De manière générale, les appels statiques sont des mauvaises pratiques car ils induisent notamment un fort couplage entre les classes et rendent les méthodes appelantes difficiles à tester. Cependant, il existe un cas d'utilisation qui utilise abondamment des appels statiques : il s'agit des classes utilitaires.</p>

<p>Cet article a pour objectif de voir comment et quand se passer des appels statiques aux classes utilitaires.</p>

<!-- more -->


<h2>De l'utilisation des classes utilitaires</h2>

<p>Les classes utilitaires sont utilisées absolument partout dans les programmes Java. Que ce soit les classes du JDK telles que <code>Math</code> ou <code>Arrays</code> ou bien celles de librairies externes comme <code>CollectionUtils</code> ou <code>FileUtils</code>, vous en avez forcément déjà utilisé.
Comme leur nom l'indique, ces classes sont très utiles pour effectuer des opérations courantes et sans état.</p>

<h2>Cas d'utilisation</h2>

<p>Pour illustrer mes propos, je vais prendre un cas d'utilisation assez classique : calculer le hash d'un mot de passe avant insertion en base de données. Ce cas d'utilisation semble être éligible à l'utilisation d'une classe utilitaire.</p>

<h3>Utilisation d'une méthode statique</h3>

<h4>Implémentation</h4>

<p>En suivant la logique des classes utilitaires, voici une implémentation possible de ce comportement.</p>

<p>Nous allons créer une classe utilitaire nommée <code>SecurityUtils</code> qui dispose d'une méthode statique <code>sha256</code> qui hash un texte en clair.</p>

<pre><code class="java">public class SecurityUtils {

   public static String sha256(String plainText) {
     try {

        MessageDigest md;
        md = MessageDigest.getInstance("SHA-256");
        md.update(plainText.getBytes("iso-8859-1"), 0, plainText.length());
        byte[] shaHash = md.digest();
        return toHexadecimal(shaHash); 

     } catch (UnsupportedEncodingException | NoSuchAlgorithmException e) {
        logger.error(e);
     } 
   }

}
</code></pre>

<p>Ensuite, la classe du service qui va appeler cette méthode</p>

<pre><code class="java">public class UserService {

   public User save(User user, String plainPassword) {

      user.setPassword(SecurityUtils.sha256(plainPassword));        
      repository.save(user);

      return user;
   }

}
</code></pre>

<p>Ce code semble correct et est très courant dans les programmes Java. Cependant, il me pose un problème conséquent. En effet, comment tester la méthode <code>save</code> de manière unitaire ?</p>

<h4>Tests</h4>

<p>Tester unitairement une méthode qui effectue des appels statiques est compliqué. Un test unitaire compliqué est souvent un symptôme d'un code trop couplé et mal conçu.</p>

<p>Voici une implémentation naïve du test unitaire de la méthode <code>save</code>.</p>

<pre><code class="java">public class UserServiceTest {

   @Test
   public void should_hash_password_when_save() {

      User user = new UserService().save(new User(), "pass_word");

      assertThat(user.getPassword).isEqualTo(SecurityUtils.sha256("pass_word"));
   }
}
</code></pre>

<p>Ce test a le mérite de ne pas dépendre de l'implémentation de <code>sha256</code>. Cependant, si celle-ci lance une exception, ou bien retourne toujours une chaine vide par exemple, le test peut générer des faux négatifs ou des faux positifs sans que l'on sache si cela provient du service ou de la classe utilitaire.</p>

<p>Il est bien évidemment possible de mocker des méthodes statiques avec des librairies comme <a href="https://code.google.com/p/powermock/">PowerMock</a> mais je préfère éviter d'utiliser ce genre de raccourci. C'est pourquoi je préfère me passer de méthodes statiques et utiliser des méthodes d'instances à la place.</p>

<h3>Utilisation d'une méthode d'instance</h3>

<h4>Implémentation</h4>

<p>Pour le même cas d'utilisation, voici l'implémentation que j'utiliserais.</p>

<p>Tout d'abord, je définis une interface qui sera le contrat de ma classe utilitaire.</p>

<pre><code class="java">public interface SecurityProvider {

   public String sha256(String plainText);

}
</code></pre>

<p>Ensuite, il faut implémenter cette interface.</p>

<pre><code class="java">public class SecurityProviderImpl implements SecurityProvider {

   public String sha256(String plainText) {
     try {

        MessageDigest md;
        md = MessageDigest.getInstance("SHA-256");
        md.update(plainText.getBytes("iso-8859-1"), 0, plainText.length());
        byte[] shaHash = md.digest();
        return toHexadecimal(shaHash); 

     } catch (UnsupportedEncodingException | NoSuchAlgorithmException e) {
        logger.error(e);
     } 
   }

}
</code></pre>

<p>Finalement, pour utiliser cette classe, il faut l'injecter dans le service. L'injection peut se faire à la main, via Spring ou JEE mais cela pourrait être l'objet d'un autre article donc je ne rentrerai pas dans les détails.</p>

<pre><code class="java">public class UserService {

   private final SecurityProvider securityProvider;

   public UserService(SecurityProvider securityProvider) {
      this.securityProvider = securityProvider;
   }

   public User save(User user, String plainPassword) {

      user.setPassword(securityProvider.sha256(plainPassword));        
      repository.save(user);

      return user;
   }

}
</code></pre>

<h4>Tests</h4>

<p>Cette implémentation est beaucoup plus simple à tester unitairement. En effet, il suffit de mocker l'interface pour vérifier le bon comportement du service. Ce mock peut être fait manuellement ou à l'aide d'un framework comme <a href="http://mockito.org/">Mockito</a>.</p>

<pre><code class="java">public class UserServiceTest {

   @Test
   public void should_hash_password_when_save() {

      SecurityProvider securityProvider = new SecurityProvider() {

         @Override
         public String sha256(String plainText) {
            return "Hashed :" + plainText;
         }

      }

      User user = new UserService(securityProvider).save(new User(), "pass_word");

      assertThat(user.getPassword).isEqualTo("Hashed :pass_word");
   }
}
</code></pre>

<p>Ce test est à 100% découplé de l'implémentation réelle de la méthode <code>sha256</code> et permet de tester de manière réellement unitaire la méthode <code>save</code> du service.</p>

<h2>Bonnes pratiques et pragmatisme</h2>

<p>L'utilisation des classes utilitaires et des méthodes statiques est globalement à proscrire car cela rend le code fortement couplé et difficile à tester. Cependant, un développeur se doit d'être pragmatique.
En effet, créer une interface, une implémentation et une injection pour chaque appel à une méthode utilitaire peut sembler un peu trop long et verbeux.</p>

<p>Je pense qu'il s'agit de trouver le bon compromis entre une utilisation sage des méthodes statiques et les bonnes pratiques de programmation. Par exemple, il n'est pas utile de mettre en place ce pattern pour des calculs simples comme une valeur absolue, un test sur la présence ou non d'élément dans une liste ou le calcul d'un minimum entre deux nombres. Par contre, quand il s'agit de traitements plus lourds comme des calculs complexes ou la manipulation d'un fichier, ce travail supplémentaire peut porter ses fruits et doit être mis en place.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Distribuer Son Application Java Sur Mac OSX Grâce à Maven]]></title>
    <link href="https://rnowif.github.io/blog/2015/03/20/distribuer-son-application-java-sur-mac-osx-grace-a-maven/"/>
    <updated>2015-03-20T21:21:43+01:00</updated>
    <id>https://rnowif.github.io/blog/2015/03/20/distribuer-son-application-java-sur-mac-osx-grace-a-maven</id>
    <content type="html"><![CDATA[<p>Dans un article précédent, nous avons vu comment distribuer son application Java sur Windows grâce à Maven. Cet article vise à faire la même chose sur MacOSX.
Nous n'allons donc pas revenir sur l'alternative qui vise à distribuer directement le jar et passer directement à la partie qui nous intéresse, à savoir distribuer un exécutable Mac OSX.</p>

<!-- more -->


<h2>Distribuer son application sur Mac OSX</h2>

<p>Sous Mac OSX, l'installation d'une application se fait via un fichier dmg. Le plugin <a href="http://mojo.codehaus.org/osxappbundle-maven-plugin/">osxappbundle</a> permet de générer automatiquement ce fichier.</p>

<h3>Générer le fichier dmg sous Mac</h3>

<p>L'utilisation de ce plugin est cependant différente selon qu'il est exécuté sous Mac ou sous un autre OS. En effet, le fichier dmg ne peut être généré <em>que sous Mac</em>.</p>

<pre><code class="xml">&lt;plugin&gt;
  &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
  &lt;artifactId&gt;osxappbundle-maven-plugin&lt;/artifactId&gt;
  &lt;version&gt;1.0-alpha-1&lt;/version&gt;
  &lt;configuration&gt;
    &lt;bundleName&gt;MyApp&lt;/bundleName&gt;
    &lt;mainClass&gt;com.foo.MyApplication&lt;/mainClass&gt;
    &lt;internetEnable&gt;true&lt;/internetEnable&gt;
    &lt;diskImageFile&gt;${project.build.directory}/MyApp.dmg&lt;/diskImageFile&gt;
  &lt;/configuration&gt;
  &lt;executions&gt;
    &lt;execution&gt;
      &lt;phase&gt;package&lt;/phase&gt;
      &lt;goals&gt;
        &lt;goal&gt;bundle&lt;/goal&gt;
      &lt;/goals&gt;
    &lt;/execution&gt;
  &lt;/executions&gt;
&lt;/plugin&gt;
</code></pre>

<h3>Générer le fichier app sous Windows ou Linux</h3>

<p>Sous un autre OS, il n'est pas possible de générer le fichier dmg. Le plugin va seulement générer un fichier zip qui, une fois dézippé, va se transformer en application Mac (format app).
Ce fichier app pourra être exécuté en double cliquant dessus simplement.</p>

<p>Pour fonctionner, le plugin a besoin du fichier <code>JavaApplicationStub</code> qui se trouve dans le dossier <code>/System/Library/Frameworks/JavaVM.framework/Resources/MacOS</code> de MacOS. Dans l'exemple ci-dessous, ce fichier a été déposé dans le dossier <code>src/main/resources</code> du projet.</p>

<pre><code class="xml">&lt;plugin&gt;
  &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
  &lt;artifactId&gt;osxappbundle-maven-plugin&lt;/artifactId&gt;
  &lt;version&gt;1.0-alpha-1&lt;/version&gt;
  &lt;configuration&gt;
    &lt;bundleName&gt;MyApp&lt;/bundleName&gt;
    &lt;mainClass&gt;com.foo.MyApplication&lt;/mainClass&gt;
    &lt;internetEnable&gt;true&lt;/internetEnable&gt;
    &lt;javaApplicationStub&gt;${basedir}/src/main/resources/JavaApplicationStub&lt;/javaApplicationStub&gt;
    &lt;buildDirectory&gt;${project.build.directory}/MyApp.app&lt;/buildDirectory&gt;
    &lt;diskImageFile&gt;${project.build.directory}/MyApp.dmg&lt;/diskImageFile&gt;
    &lt;zipFile&gt;${project.build.directory}/MyApp.zip&lt;/zipFile&gt;
  &lt;/configuration&gt;
  &lt;executions&gt;
    &lt;execution&gt;
      &lt;phase&gt;package&lt;/phase&gt;
      &lt;goals&gt;
        &lt;goal&gt;bundle&lt;/goal&gt;
      &lt;/goals&gt;
    &lt;/execution&gt;
  &lt;/executions&gt;
&lt;/plugin&gt;
</code></pre>

<h2>Conclusion</h2>

<p>Générer un fichier exécutable pour MacOS n'est pas très compliqué. Cependant, afin de générer un fichier dmg, il faut absolument que la machine qui utilise le plugin maven tourne sous MacOS. Dans le cas contraire (un serveur d'intégration continue sous Linux par exemple), il faudra se contenter d'un fichier zip qui, une fois dézippé, pourra être ouvert comme une application normale.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Distribuer Son Application Java Sur Windows Grâce à Maven]]></title>
    <link href="https://rnowif.github.io/blog/2015/03/19/distribuer-son-application-java-sur-windows-grace-a-maven/"/>
    <updated>2015-03-19T21:25:16+01:00</updated>
    <id>https://rnowif.github.io/blog/2015/03/19/distribuer-son-application-java-sur-windows-grace-a-maven</id>
    <content type="html"><![CDATA[<p>Vous avez développé une application java qui va révolutionner le monde. Bravo ! Maintenant, il vous faut la distribuer au monde entier afin que chacun puisse en profiter. Cet article a pour but de montrer comment le faire grâce à l'outil <a href="http://maven.apache.org/">Maven</a>. Il ne s'agit pas d'un article sur Maven en lui-même ni sur la mise en place d'un projet avec Maven.</p>

<!-- more -->


<h2>Distribuer directement l'archive jar</h2>

<p>Lorsque l'on cherche à distribuer une application, le premier réflexe est de générer une archive jar. Voici une façon de générer un jar autoporteur avec Maven. Celui-ci va contenir toutes les dépendances que votre application pourrait avoir besoin.</p>

<pre><code class="xml">&lt;plugin&gt;
   &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
   &lt;executions&gt;
      &lt;execution&gt;
         &lt;id&gt;application-assembly&lt;/id&gt;
         &lt;phase&gt;package&lt;/phase&gt;
         &lt;goals&gt;
            &lt;goal&gt;single&lt;/goal&gt;
         &lt;/goals&gt;
         &lt;configuration&gt;
            &lt;descriptorRefs&gt;
               &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;
            &lt;/descriptorRefs&gt;
            &lt;archive&gt;
               &lt;index&gt;true&lt;/index&gt;
               &lt;manifest&gt;
                  &lt;addClasspath&gt;true&lt;/addClasspath&gt;
                  &lt;addDefaultImplementationEntries&gt;true&lt;/addDefaultImplementationEntries&gt;
                  &lt;mainClass&gt;com.foo.MyApplication&lt;/mainClass&gt;
               &lt;/manifest&gt;
               &lt;manifestEntries&gt;
                  &lt;Application-Name&gt;${project.name}&lt;/Application-Name&gt;
                  &lt;Permissions&gt;all-permissions&lt;/Permissions&gt;
               &lt;/manifestEntries&gt;
            &lt;/archive&gt;
         &lt;/configuration&gt;
      &lt;/execution&gt;
   &lt;/executions&gt;
&lt;/plugin&gt;
</code></pre>

<p>L’utilisateur devra alors récupérer le fichier <code>MyApplication-jar-with-dependencies.jar</code> et l’exécuter en lancant la commande suivante :</p>

<pre><code>java -jar MyApplication-jar-with-dependencies.jar
</code></pre>

<p>Pas très pratique n’est-ce pas ? Dans la suite de l’article, nous verrons comment distribuer ce jar sous un format plus courant pour les utilisateurs.</p>

<h2>Distribuer son application sur Windows</h2>

<h3>Fichier exécutable</h3>

<p>L’utilisateur lambda de Windows est habitué à manipuler des fichiers exécutables *.exe où il n’a qu’à double-cliquer pour lancer. Maven est capable de générer cet exécutable grâce au plugin <a href="https://github.com/lukaszlenart/launch4j-maven-plugin">launch4j</a>.</p>

<pre><code class="xml">&lt;plugin&gt;
   &lt;groupId&gt;com.akathist.maven.plugins.launch4j&lt;/groupId&gt;
   &lt;artifactId&gt;launch4j-maven-plugin&lt;/artifactId&gt;
   &lt;executions&gt;
      &lt;execution&gt;
         &lt;id&gt;l4j-clui&lt;/id&gt;
         &lt;phase&gt;package&lt;/phase&gt;
         &lt;goals&gt;
            &lt;goal&gt;launch4j&lt;/goal&gt;
         &lt;/goals&gt;
         &lt;configuration&gt;
            &lt;dontWrapJar&gt;false&lt;/dontWrapJar&gt;
            &lt;headerType&gt;gui&lt;/headerType&gt;
            &lt;outfile&gt;${project.build.directory}/MyApp.exe&lt;/outfile&gt;
            &lt;jar&gt;${project.build.directory}/MyApplication-jar-with-dependencies.jar&lt;/jar&gt;
            &lt;jre&gt;
               &lt;minVersion&gt;1.6.0&lt;/minVersion&gt;
            &lt;/jre&gt;
            &lt;versionInfo&gt;
               &lt;fileVersion&gt;1.0.0.0&lt;/fileVersion&gt;
               &lt;txtFileVersion&gt;${project.version}&lt;/txtFileVersion&gt;
               &lt;fileDescription&gt;Description de l'application&lt;/fileDescription&gt;
               &lt;copyright&gt;Copyright FooCompany 2015&lt;/copyright&gt;
               &lt;productVersion&gt;1.0.0.0&lt;/productVersion&gt;
               &lt;txtProductVersion&gt;${project.version}&lt;/txtProductVersion&gt;
               &lt;companyName&gt;FooCompany&lt;/companyName&gt;
               &lt;productName&gt;Nom de l'application&lt;/productName&gt;
               &lt;internalName&gt;Nom de l'application&lt;/internalName&gt;
               &lt;originalFilename&gt;MyApp.exe&lt;/originalFilename&gt;
            &lt;/versionInfo&gt;
         &lt;/configuration&gt;
      &lt;/execution&gt;
   &lt;/executions&gt;
&lt;/plugin&gt;
</code></pre>

<p>Lors de la phase de package, Maven va alors générer le fichier <code>MyApp.exe</code> qui n’est rien d’autre qu’un wrapper autour du fichier jar autoporteur. Il suffira alors de double cliquer dessus pour l’exécuter. Cependant, ce n’est pas toujours suffisant d’avoir un exécutable seul pour lancer l’application. Vous pourriez avoir envie de mettre des raccourcis sur le bureau, dans le menu Démarrer, avoir une jolie icône, etc. Nous allons donc voir comment réaliser toutes ces choses à l’aide d’un installateur.</p>

<h3>Installateur</h3>

<p>Pour que Maven génère l’installateur, il est possible d’utiliser le plugin <a href="http://mojo.codehaus.org/nsis-maven-plugin/">NSIS</a>.</p>

<p>Afin de faire fonctionner ce plugin, il faut plusieurs choses :</p>

<ul>
<li>Installer NSIS sur la machine qui va builder l’application</li>
<li>Modifier le <code>pom.xml</code> pour dire à Maven d’exécuter NSIS</li>
<li>Configurer NSIS pour générer correctement l’installateur</li>
</ul>


<h4>Installer NSIS</h4>

<p>NSIS peut être téléchargé depuis le site de l’éditeur : <a href="http://nsis.sourceforge.net/Main_Page">http://nsis.sourceforge.net/Main_Page</a></p>

<h4>Modifier le pom.xml</h4>

<p>La partie à écrire dans le <code>pom.xml</code> est assez brève. Il suffit en fait d’indiquer à Maven les goals du plugin à appeler ainsi que le nom final de l’installateur.</p>

<pre><code class="xml">&lt;plugin&gt;
   &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
   &lt;artifactId&gt;nsis-maven-plugin&lt;/artifactId&gt;
   &lt;version&gt;1.0-alpha-1&lt;/version&gt;
   &lt;executions&gt;
      &lt;execution&gt;
         &lt;goals&gt;
            &lt;goal&gt;generate-headerfile&lt;/goal&gt;
            &lt;goal&gt;make&lt;/goal&gt;
         &lt;/goals&gt;
      &lt;/execution&gt;
   &lt;/executions&gt;
   &lt;configuration&gt;
      &lt;outputFile&gt;MyApp-setup.exe&lt;/outputFile&gt;
   &lt;/configuration&gt;
&lt;/plugin&gt;
</code></pre>

<p>Le goal <code>generate-headfile</code> du plugin va générer un fichier <code>project.nsh</code> qui va définir des constantes telles que <code>PROJECT_NAME</code> ou <code>PROJECT_VERSION</code>. Le goal <code>make</code> va ensuite récupérer le fichier de configuration de NSIS pour générer l’installateur proprement dit.</p>

<h4>Créer le fichier de configuration NSIS</h4>

<p>Ce fichier, appelé <code>setup.nsi</code> doit se trouver à la racine du projet, à coté du <code>pom.xml</code>. Il contient toutes les actions à faire au moment de l’installation. Le langage utilisé est un langage de script rudimentaire permettant d’effectuer des actions simples comme copier un fichier, créer un raccourci, créer un dossier, etc.</p>

<p>Voici un exemple simple de setup.nsi qui va s’installer dans les programmes, créer des raccourcis dans le menu démarrer et sur le bureau. Il va également copier un fichier *.ico (qui doit se trouver à la racine du projet également) et l’utiliser comme icône de l’application. Finalement, il va créer un exécutable qui va permettre de désinstaller l’application (suppression de tous les dossiers et icônes créés précédemment).</p>

<p><em>NB : Les constantes définies dans le project.nsh sont utilisables dans le setup.nsi</em></p>

<pre><code>; Installer for MyApp
;======================================================
; Includes
  !include MUI.nsh
  !include Sections.nsh
  !include target\project.nsh
;======================================================
; Installer Information
  Name "${PROJECT_NAME}"

  SetCompressor /SOLID lzma
  XPStyle on
  CRCCheck on
  InstallDir "C:\Program Files\FooCompany\"
  AutoCloseWindow false
  ShowInstDetails show
  Icon "${NSISDIR}\Contrib\Graphics\Icons\orange-install.ico"

;======================================================
; Version Tab information for Setup.exe properties

  VIProductVersion 2015.02.15.0
  VIAddVersionKey ProductName "${PROJECT_NAME}"
  VIAddVersionKey ProductVersion "${PROJECT_VERSION}"
  VIAddVersionKey CompanyName "${PROJECT_ORGANIZATION_NAME}"
  VIAddVersionKey FileVersion "${PROJECT_VERSION}"
  VIAddVersionKey FileDescription ""
  VIAddVersionKey LegalCopyright ""

;======================================================
; Modern Interface Configuration

  !define MUI_HEADERIMAGE
  !define MUI_ABORTWARNING
  !define MUI_COMPONENTSPAGE_SMALLDESC
  !define MUI_HEADERIMAGE_BITMAP_NOSTRETCH
  !define MUI_FINISHPAGE
  !define MUI_FINISHPAGE_TEXT "Thank you for installing ${PROJECT_NAME}."
  !define MUI_ICON "${NSISDIR}\Contrib\Graphics\Icons\orange-install.ico"

;======================================================
; Modern Interface Pages

  !define MUI_DIRECTORYPAGE_VERIFYONLEAVE
  !insertmacro MUI_PAGE_DIRECTORY
  !insertmacro MUI_PAGE_COMPONENTS
  !insertmacro MUI_PAGE_INSTFILES
  !insertmacro MUI_PAGE_FINISH

;======================================================
; Languages

  !insertmacro MUI_LANGUAGE "English"

;======================================================
; Installer Sections

Section "MyApp"
   SetOutPath $INSTDIR
   SetOverwrite on

   File target\MyApp.exe
   File MyApp.ico

   CreateShortCut "$DESKTOP\MyApp.lnk" "$INSTDIR\MyApp.exe" "" "$INSTDIR\MyApp.ico" 0

   CreateDirectory "$SMPROGRAMS\FooCompany"
   CreateShortcut "$SMPROGRAMS\FooCompany\MyApp.lnk" "$INSTDIR\MyApp.exe" "" "$INSTDIR\MyApp.ico" 0
   CreateShortCut "$SMPROGRAMS\FooCompany\Uninstall.lnk" "$INSTDIR\Uninstall.exe" "" "$INSTDIR\Uninstall.exe" 0

   writeUninstaller "$INSTDIR\MyApp_uninstall.exe"
SectionEnd

Section "uninstall"
   ;Delete Files 
   RMDir /r "$INSTDIR\*.*"    

   ;Remove the installation directory
   RMDir "$INSTDIR"

   ;Delete Start Menu Shortcuts
   Delete "$DESKTOP\MyApp.lnk"
   Delete "$SMPROGRAMS\FooCompany\*.*"
   RmDir  "$SMPROGRAMS\FooCompany"
SectionEnd

Function .onInit
   InitPluginsDir
FunctionEnd
</code></pre>

<p>Pour plus de possibilités, vous pouvez consulter la <a href="http://nsis.sourceforge.net/Docs/">documentation</a>.</p>

<h2>Conclusion</h2>

<p>Cet article a permis de voir qu’à l’aide de quelques plugins Maven, il est relativement simple de générer un installateur Windows qui va installer votre application java sur un poste Windows. Il est important de noter que cet installateur est généré même si le build est lancé sous Linux. Ainsi, un serveur d’intégration continue pourra automatiquement générer l’installateur à la seule condition que NSIS soit installé sur la machine.</p>

<p>Dans un prochain article, nous verrons comment générer un fichier exécutable pour distribuer votre application sous Mac OS X.</p>

<p>Et-vous, avez-vous déjà essayé de générer automatiquement des installateurs pour Windows ? Comment avez-vous fait ? N’hésitez pas à déposer un commentaire pour en discuter.</p>
]]></content>
  </entry>
  
</feed>
